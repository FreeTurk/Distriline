import "@/styles/globals.css";
import "@/styles/preflight.css";
import type { AppProps } from "next/app";
import Head from "next/head";
import { MantineProvider, Collapse, Indicator } from "@mantine/core";
import { useState, useEffect } from "react";

import NotificationProp from "@/components/Notification";

import { IconChevronUp, IconChevronDown } from "@tabler/icons-react";

import Sidebar from "@/components/Sidebar";

import { appWithTranslation, useTranslation } from "next-i18next";

import { serverSideTranslations } from "next-i18next/serverSideTranslations";
import { useRouter } from "next/router";

export async function getServerSideProps({ locale }) {
  return {
    props: {
      ...(await serverSideTranslations(locale, ["common"])),
      // Will be passed to the page component as props
    },
  };
}

const App = ({ Component, pageProps }: AppProps) => {
  //? Props
  const [locale, setLocale] = useState<string>("");
  const [theme, setTheme] = useState<"light" | "dark">("dark");
  const [notifications, setNotifications] = useState<Array<JSX.Element>>([]);
  const [notificationsCollapsed, setNotificationsCollapsed] = useState<boolean>(true);
  const [user, setUser] = useState<object | null>(null);

  const router = useRouter();
  const { t, i18n } = useTranslation();

  useEffect(() => {
    /* Handler for removing notifications */

    document.addEventListener("deleteNotification", (event) => {
      setNotifications(
        notifications.filter((item) => {
          return item.key != event.detail.id;
        })
      );
    });

    /* Handler for creating notifications */

    document.addEventListener("notificationIncoming", (e) => {
      setNotificationsCollapsed(false);
      setNotifications([
        ...notifications,
        <NotificationProp
          state={e.detail.type}
          body={e.detail.body}
          title={e.detail.title}
          fading={e.detail.fading}
          key={notifications.length}
          id={notifications.length}></NotificationProp>,
      ]);
    });
  }, [notifications, setNotifications]);

  return (
    <div className={theme}>
      <Head>
        <title>Distriline23</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <MantineProvider
        theme={{
          colorScheme: theme,
        }}
        withGlobalStyles>
        <div className="flex w-screen h-screen bg-inherit overflow-hidden transform-gpu">
          {notifications.length > 0 ? (
            <div
              className="flex backdrop-blur-xl flex-col absolute top-2 right-3 z-50 max-h-72 bg-inherit rounded-md overflow-y-scroll border border-gray-300 dark:border-gray-600 transition-all"
              id="notifications">
              <Indicator
                size={16}
                className="sticky top-0 w-full bg-inherit transform-gpu"
                position="top-start"
                offset={12}
                processing
                label={notifications.length}>
                <p
                  className="flex items-end flex-row gap-2 border-b border-gray-300 dark:border-gray-600 top-0 z-50 bg-inherit pl-4 pr-1 py-2 cursor-pointer"
                  onClick={() => setNotificationsCollapsed(!notificationsCollapsed)}>
                  {`${t("notifications")}`}
                  <span className="text-xs">
                    {!notificationsCollapsed ? (
                      <IconChevronDown></IconChevronDown>
                    ) : (
                      <IconChevronUp></IconChevronUp>
                    )}
                  </span>
                </p>
              </Indicator>
              <Collapse in={!notificationsCollapsed} className="overflow-y-scroll">
                <div className="px-2 py-3 flex flex-col gap-2 w-96">{notifications}</div>
              </Collapse>
            </div>
          ) : (
            <></>
          )}

          {router.pathname !== "/setup" && (
            <Sidebar setLocale={setLocale} setTheme={setTheme} theme={theme} />
          )}
          <Component {...pageProps} setTheme={setTheme} theme={theme} />
        </div>
      </MantineProvider>
    </div>
  );
};

export default appWithTranslation(App);
